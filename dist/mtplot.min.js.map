{"version":3,"file":"mtplot.min.js","sources":["../src/renderers/SVGRenderer.ts","../src/patterns/LowValueDetector.ts","../src/patterns/StagnationDetector.ts","../src/utils/Statistics.ts","../src/utils/DateUtils.ts","../src/MTPlot.ts"],"sourcesContent":["import { TextOptions } from '../types';\n\nconst SVG_NS = 'http://www.w3.org/2000/svg';\n\ninterface SVGRendererOptions {\n  highContrast?: boolean;\n  interactive?: boolean;\n  tooltip?: string;\n}\n\nexport class SVGRenderer {\n  private svg: SVGSVGElement;\n  private mainGroup: SVGGElement;\n  private tooltip: SVGGElement;\n  private tooltipBackground: SVGRectElement;\n  private tooltipText: SVGTextElement;\n  private width: number;\n  private height: number;\n\n  constructor(\n    container: HTMLElement,\n    options: {\n      width: number;\n      height: number;\n      backgroundColor?: string;\n    }\n  ) {\n    this.width = options.width;\n    this.height = options.height;\n\n    // Create SVG element\n    this.svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    this.svg.setAttribute(\"width\", this.width.toString());\n    this.svg.setAttribute(\"height\", this.height.toString());\n    this.svg.style.backgroundColor = options.backgroundColor || \"#ffffff\";\n\n    // Create main group for transformations\n    this.mainGroup = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    this.svg.appendChild(this.mainGroup);\n\n    // Create tooltip elements\n    this.tooltip = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    this.tooltip.style.display = \"none\";\n    \n    this.tooltipBackground = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n    this.tooltipBackground.setAttribute(\"fill\", \"white\");\n    this.tooltipBackground.setAttribute(\"stroke\", \"black\");\n    this.tooltipBackground.setAttribute(\"rx\", \"4\");\n    this.tooltipBackground.setAttribute(\"ry\", \"4\");\n    \n    this.tooltipText = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n    this.tooltipText.setAttribute(\"fill\", \"black\");\n    this.tooltipText.setAttribute(\"font-size\", \"12px\");\n    \n    this.tooltip.appendChild(this.tooltipBackground);\n    this.tooltip.appendChild(this.tooltipText);\n    this.svg.appendChild(this.tooltip);\n\n    // Add SVG to container\n    container.appendChild(this.svg);\n  }\n\n  private setupInteraction(): void {\n    let isPanning = false;\n    let startX = 0;\n    let startY = 0;\n    let currentTransform = { x: 0, y: 0, scale: 1 };\n\n    this.svg.addEventListener('mousedown', (e: MouseEvent) => {\n      isPanning = true;\n      startX = e.clientX;\n      startY = e.clientY;\n    });\n\n    this.svg.addEventListener('mousemove', (e: MouseEvent) => {\n      if (!isPanning) return;\n      const dx = e.clientX - startX;\n      const dy = e.clientY - startY;\n      currentTransform.x += dx;\n      currentTransform.y += dy;\n      startX = e.clientX;\n      startY = e.clientY;\n      this.updateTransform(currentTransform);\n    });\n\n    this.svg.addEventListener('mouseup', () => {\n      isPanning = false;\n    });\n\n    this.svg.addEventListener('wheel', (e: WheelEvent) => {\n      e.preventDefault();\n      const scaleFactor = e.deltaY > 0 ? 0.9 : 1.1;\n      currentTransform.scale *= scaleFactor;\n      this.updateTransform(currentTransform);\n    });\n  }\n\n  private updateTransform(transform: { x: number; y: number; scale: number }): void {\n    this.mainGroup.setAttribute(\n      'transform',\n      `translate(${transform.x},${transform.y}) scale(${transform.scale})`\n    );\n  }\n\n  public resize(width: number, height: number): void {\n    this.width = width;\n    this.height = height;\n    this.svg.setAttribute('width', width.toString());\n    this.svg.setAttribute('height', height.toString());\n    this.svg.setAttribute('viewBox', `0 0 ${width} ${height}`);\n  }\n\n  public clear(): void {\n    while (this.mainGroup.firstChild) {\n      this.mainGroup.removeChild(this.mainGroup.firstChild);\n    }\n  }\n\n  public drawBar(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    color: string,\n    options: {\n      interactive?: boolean;\n      tooltip?: string;\n      highContrast?: boolean;\n      isHovered?: boolean;\n      onHover?: () => void;\n      onLeave?: () => void;\n    } = {}\n  ): void {\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n    rect.setAttribute(\"x\", x.toString());\n    rect.setAttribute(\"y\", y.toString());\n    rect.setAttribute(\"width\", width.toString());\n    rect.setAttribute(\"height\", height.toString());\n    rect.setAttribute(\"fill\", color);\n    \n    if (options.isHovered) {\n      rect.setAttribute(\"stroke\", \"#000000\");\n      rect.setAttribute(\"stroke-width\", \"2\");\n      rect.setAttribute(\"fill-opacity\", \"0.8\");\n    }\n\n    if (options.interactive) {\n      rect.style.cursor = \"pointer\";\n      \n      if (options.tooltip) {\n        rect.addEventListener(\"mouseenter\", (e) => {\n          this.showTooltip(options.tooltip!, e.clientX, e.clientY);\n          options.onHover?.();\n        });\n        \n        rect.addEventListener(\"mouseleave\", () => {\n          this.hideTooltip();\n          options.onLeave?.();\n        });\n        \n        rect.addEventListener(\"mousemove\", (e) => {\n          this.updateTooltipPosition(e.clientX, e.clientY);\n        });\n      }\n    }\n\n    this.mainGroup.appendChild(rect);\n  }\n\n  private getHighContrastColor(color: string): string {\n    // Convert to high contrast version of the color\n    const rgb = this.hexToRgb(color);\n    if (!rgb) return color;\n    \n    const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    return brightness > 128 ? '#000000' : '#FFFFFF';\n  }\n\n  private hexToRgb(hex: string): { r: number; g: number; b: number } | null {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  private setupBarInteraction(element: SVGElement): void {\n    element.addEventListener('mouseenter', (e: MouseEvent) => {\n      const tooltip = element.getAttribute('data-tooltip');\n      if (tooltip) {\n        this.showTooltip(tooltip, e.clientX, e.clientY);\n      }\n    });\n\n    element.addEventListener('mouseleave', () => {\n      this.hideTooltip();\n    });\n  }\n\n  private clientToSVGPoint(clientX: number, clientY: number): { x: number; y: number } {\n    const pt = this.svg.createSVGPoint();\n    pt.x = clientX;\n    pt.y = clientY;\n    \n    // Convert client coordinates to SVG coordinates\n    const svgP = pt.matrixTransform(this.svg.getScreenCTM()?.inverse());\n    return { x: svgP.x, y: svgP.y };\n  }\n\n  public showTooltip(text: string, clientX: number, clientY: number): void {\n    const svgPoint = this.clientToSVGPoint(clientX, clientY);\n    \n    // Clear previous tooltip content\n    while (this.tooltipText.firstChild) {\n      this.tooltipText.removeChild(this.tooltipText.firstChild);\n    }\n    \n    // Add text content\n    const tspan = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n    tspan.textContent = text;\n    tspan.setAttribute(\"x\", \"5\");\n    tspan.setAttribute(\"y\", \"15\");\n    this.tooltipText.appendChild(tspan);\n    \n    // Calculate tooltip dimensions\n    const bbox = this.tooltipText.getBBox();\n    const padding = 5;\n    const tooltipWidth = bbox.width + 2 * padding;\n    const tooltipHeight = bbox.height + 2 * padding;\n    \n    // Position tooltip\n    let tooltipX = svgPoint.x + 10;\n    let tooltipY = svgPoint.y - tooltipHeight - 10;\n    \n    // Adjust position if tooltip would go outside viewport\n    if (tooltipX + tooltipWidth > this.width) {\n      tooltipX = svgPoint.x - tooltipWidth - 10;\n    }\n    if (tooltipY < 0) {\n      tooltipY = svgPoint.y + 20;\n    }\n    \n    // Update tooltip position and dimensions\n    this.tooltipBackground.setAttribute(\"x\", tooltipX.toString());\n    this.tooltipBackground.setAttribute(\"y\", tooltipY.toString());\n    this.tooltipBackground.setAttribute(\"width\", tooltipWidth.toString());\n    this.tooltipBackground.setAttribute(\"height\", tooltipHeight.toString());\n    \n    this.tooltipText.setAttribute(\"transform\", `translate(${tooltipX}, ${tooltipY})`);\n    \n    // Show tooltip\n    this.tooltip.style.display = \"\";\n  }\n\n  public hideTooltip(): void {\n    this.tooltip.style.display = \"none\";\n  }\n\n  public updateTooltipPosition(clientX: number, clientY: number): void {\n    const svgPoint = this.clientToSVGPoint(clientX, clientY);\n    const bbox = this.tooltipText.getBBox();\n    const padding = 5;\n    const tooltipWidth = bbox.width + 2 * padding;\n    const tooltipHeight = bbox.height + 2 * padding;\n    \n    let tooltipX = svgPoint.x + 10;\n    let tooltipY = svgPoint.y - tooltipHeight - 10;\n    \n    if (tooltipX + tooltipWidth > this.width) {\n      tooltipX = svgPoint.x - tooltipWidth - 10;\n    }\n    if (tooltipY < 0) {\n      tooltipY = svgPoint.y + 20;\n    }\n    \n    this.tooltipBackground.setAttribute(\"x\", tooltipX.toString());\n    this.tooltipBackground.setAttribute(\"y\", tooltipY.toString());\n    this.tooltipText.setAttribute(\"transform\", `translate(${tooltipX}, ${tooltipY})`);\n  }\n\n  public drawPattern(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    color: string,\n    patternType?: string\n  ): void {\n    const pattern = document.createElementNS(SVG_NS, 'rect');\n    pattern.setAttribute('x', x.toString());\n    pattern.setAttribute('y', y.toString());\n    pattern.setAttribute('width', width.toString());\n    pattern.setAttribute('height', height.toString());\n    pattern.setAttribute('fill', color);\n    pattern.setAttribute('fill-opacity', '0.3');\n    \n    // Add pattern-specific styling\n    if (patternType) {\n      switch (patternType) {\n        case 'lowValue':\n          pattern.setAttribute('stroke', 'red');\n          pattern.setAttribute('stroke-dasharray', '4,4');\n          break;\n        case 'stagnation':\n          pattern.setAttribute('stroke', 'orange');\n          pattern.setAttribute('stroke-width', '2');\n          break;\n      }\n    }\n\n    this.mainGroup.appendChild(pattern);\n  }\n\n  public drawText(x: number, y: number, text: string, options: TextOptions = {}): void {\n    const textElem = document.createElementNS(SVG_NS, 'text');\n    const attrs = [\n      ['x', x.toString()],\n      ['y', y.toString()],\n      ['fill', options.color || 'black'],\n      ['font-family', options.fontFamily || 'monospace'],\n      ['font-size', (options.fontSize || 12).toString()]\n    ];\n\n    if (options.stroke) {\n      attrs.push(['stroke', options.stroke]);\n      attrs.push(['stroke-width', (options.strokeWidth || 1).toString()]);\n    }\n\n    attrs.forEach(([name, value]) => textElem.setAttribute(name, value));\n    textElem.textContent = text;\n    this.mainGroup.appendChild(textElem);\n  }\n\n  public drawLine(x1: number, y1: number, x2: number, y2: number, color: string, width: number): void {\n    const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    line.setAttribute(\"x1\", x1.toString());\n    line.setAttribute(\"y1\", y1.toString());\n    line.setAttribute(\"x2\", x2.toString());\n    line.setAttribute(\"y2\", y2.toString());\n    line.setAttribute(\"stroke\", color);\n    line.setAttribute(\"stroke-width\", width.toString());\n    \n    this.mainGroup.appendChild(line);\n  }\n\n  public getSVGElement(): SVGSVGElement {\n    return this.svg;\n  }\n}\n","import { DataPoint, LowValueOptions } from '../types';\n\nexport class LowValueDetector {\n  private threshold: number;\n  private consecutiveDays: number;\n\n  constructor(options: LowValueOptions) {\n    this.threshold = options.threshold;\n    this.consecutiveDays = options.consecutiveDays;\n  }\n\n  findPatterns(data: DataPoint[]): { start: number; end: number }[] {\n    if (data.length < this.consecutiveDays) return [];\n\n    const patterns: { start: number; end: number }[] = [];\n    const valueRange = this.calculateValueRange(data);\n    const lowThreshold = Math.min(...data.map(d => d.y)) + (valueRange * this.threshold);\n\n    let currentSequence: number[] = [];\n\n    data.forEach((point, index) => {\n      if (point.y <= lowThreshold) {\n        currentSequence.push(index);\n      } else {\n        if (this.isValidSequence(currentSequence, data)) {\n          patterns.push({\n            start: currentSequence[0],\n            end: currentSequence[currentSequence.length - 1]\n          });\n        }\n        currentSequence = [];\n      }\n    });\n\n    // Check last sequence\n    if (this.isValidSequence(currentSequence, data)) {\n      patterns.push({\n        start: currentSequence[0],\n        end: currentSequence[currentSequence.length - 1]\n      });\n    }\n\n    return patterns;\n  }\n\n  private calculateValueRange(data: DataPoint[]): number {\n    const values = data.map(d => d.y);\n    return Math.max(...values) - Math.min(...values);\n  }\n\n  private isValidSequence(sequence: number[], data: DataPoint[]): boolean {\n    if (sequence.length < this.consecutiveDays) return false;\n\n    // Check if points are consecutive days\n    for (let i = 1; i < sequence.length; i++) {\n      const daysDiff = (data[sequence[i]].x.valueOf() - data[sequence[i-1]].x.valueOf()) / (24 * 60 * 60 * 1000);\n      if (daysDiff > 1.1) return false; // Allow small tolerance\n    }\n\n    return true;\n  }\n}\n","import { DataPoint, StagnationOptions } from '../types';\n\nexport class StagnationDetector {\n  private consecutiveDays: number;\n  private changeThreshold: number;\n  private activeChangePercentage: number;\n\n  constructor(options: StagnationOptions) {\n    this.consecutiveDays = options.consecutiveDays;\n    this.changeThreshold = options.changeThreshold;\n    this.activeChangePercentage = options.activeChangePercentage;\n  }\n\n  findPatterns(data: DataPoint[]): { start: number; end: number }[] {\n    if (data.length < this.consecutiveDays) return [];\n\n    const patterns: { start: number; end: number }[] = [];\n    const avgDailyChange = this.calculateAverageChange(data);\n    \n    if (!this.hasEnoughActiveChanges(data, avgDailyChange)) {\n      return [];\n    }\n\n    let currentSequence: number[] = [];\n    const significantChangeThreshold = avgDailyChange * this.changeThreshold;\n\n    data.forEach((point, index) => {\n      currentSequence.push(index);\n\n      if (index === data.length - 1 || \n          Math.abs(data[index + 1].y - point.y) > significantChangeThreshold) {\n        if (this.isStagnationPeriod(currentSequence, data, significantChangeThreshold)) {\n          patterns.push({\n            start: currentSequence[0],\n            end: currentSequence[currentSequence.length - 1]\n          });\n        }\n        currentSequence = [];\n      }\n    });\n\n    return patterns;\n  }\n\n  private calculateAverageChange(data: DataPoint[]): number {\n    if (data.length < 2) return 0;\n\n    let totalChange = 0;\n    let changes = 0;\n\n    for (let i = 1; i < data.length; i++) {\n      const change = Math.abs(data[i].y - data[i-1].y);\n      if (change > 0) {\n        totalChange += change;\n        changes++;\n      }\n    }\n\n    return changes > 0 ? totalChange / changes : 0;\n  }\n\n  private hasEnoughActiveChanges(data: DataPoint[], avgDailyChange: number): boolean {\n    if (data.length < 2) return false;\n\n    let significantChanges = 0;\n    const significantChangeThreshold = avgDailyChange * this.changeThreshold;\n\n    for (let i = 1; i < data.length; i++) {\n      const change = Math.abs(data[i].y - data[i-1].y);\n      if (change > significantChangeThreshold) {\n        significantChanges++;\n      }\n    }\n\n    return (significantChanges / (data.length - 1)) >= this.activeChangePercentage;\n  }\n\n  private isStagnationPeriod(\n    sequence: number[], \n    data: DataPoint[], \n    significantChangeThreshold: number\n  ): boolean {\n    if (sequence.length < this.consecutiveDays) return false;\n\n    // Check if points are consecutive days\n    for (let i = 1; i < sequence.length; i++) {\n      const daysDiff = (data[sequence[i]].x.valueOf() - data[sequence[i-1]].x.valueOf()) / (24 * 60 * 60 * 1000);\n      if (daysDiff > 1.1) return false;\n    }\n\n    // Check if changes are below threshold\n    for (let i = 1; i < sequence.length; i++) {\n      const change = Math.abs(data[sequence[i]].y - data[sequence[i-1]].y);\n      if (change > significantChangeThreshold) return false;\n    }\n\n    return true;\n  }\n}\n","export function calculateMean(values: number[]): number {\n  if (values.length === 0) return 0;\n  return values.reduce((sum, val) => sum + val, 0) / values.length;\n}\n\nexport function calculateMedian(values: number[]): number {\n  if (values.length === 0) return 0;\n  \n  const sorted = [...values].sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n  \n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  }\n  return sorted[middle];\n}\n\nexport function calculateStandardDeviation(values: number[]): number {\n  if (values.length < 2) return 0;\n  \n  const mean = calculateMean(values);\n  const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n  const variance = calculateMean(squaredDiffs);\n  \n  return Math.sqrt(variance);\n}\n\nexport function calculatePercentile(values: number[], percentile: number): number {\n  if (values.length === 0) return 0;\n  if (percentile < 0 || percentile > 100) throw new Error('Percentile must be between 0 and 100');\n  \n  const sorted = [...values].sort((a, b) => a - b);\n  const index = (percentile / 100) * (sorted.length - 1);\n  const lower = Math.floor(index);\n  const upper = Math.ceil(index);\n  \n  if (lower === upper) return sorted[lower];\n  \n  const fraction = index - lower;\n  return sorted[lower] * (1 - fraction) + sorted[upper] * fraction;\n}\n\nexport function calculateMovingAverage(values: number[], window: number): number[] {\n  if (window < 1 || window > values.length) return values;\n  \n  const result: number[] = [];\n  for (let i = 0; i < values.length - window + 1; i++) {\n    const windowValues = values.slice(i, i + window);\n    result.push(calculateMean(windowValues));\n  }\n  \n  return result;\n}\n","export function isConsecutiveDays(date1: Date, date2: Date, tolerance: number = 1.1): boolean {\n  const daysDiff = (date2.valueOf() - date1.valueOf()) / (24 * 60 * 60 * 1000);\n  return daysDiff <= tolerance;\n}\n\nexport function formatDate(date: Date): string {\n  return date.toISOString();\n}\n\nexport function getDateRange(dates: Date[]): { min: Date; max: Date } {\n  return {\n    min: new Date(Math.min(...dates.map(d => d.valueOf()))),\n    max: new Date(Math.max(...dates.map(d => d.valueOf())))\n  };\n}\n","import { SVGRenderer } from './renderers/SVGRenderer';\nimport { LowValueDetector } from './patterns/LowValueDetector';\nimport { StagnationDetector } from './patterns/StagnationDetector';\nimport { DataPoint, PlotOptions, Theme, PatternDetectionOptions, Dataset } from './types';\nimport { calculateMean, calculateMedian, calculateMovingAverage } from './utils/Statistics';\nimport { formatDate } from './utils/DateUtils';\n\nconst DEFAULT_THEME: Theme = {\n  barColor: 'black',\n  barHoverColor: 'blue',\n  lowValueColor: 'rgba(255,0,0,0.2)',\n  stagnationColor: 'rgba(255,165,0,0.2)',\n  backgroundColor: 'white',\n  textColor: 'black',\n  fontFamily: 'monospace',\n  fontSize: 12\n};\n\nconst DEFAULT_OPTIONS: PlotOptions = {\n  width: 800,\n  height: 400,\n  theme: DEFAULT_THEME,\n  patterns: {\n    lowValue: {\n      threshold: 0.02,\n      consecutiveDays: 2\n    },\n    stagnation: {\n      consecutiveDays: 3,\n      changeThreshold: 0.2,\n      activeChangePercentage: 0.85\n    }\n  },\n  responsive: true,\n  accessibility: {\n    enableKeyboardNavigation: true,\n    enableScreenReader: true,\n    highContrast: false,\n    ariaLabel: 'Time series chart'\n  },\n  interaction: {\n    enableZoom: true,\n    enablePan: true,\n    tooltipFormat: (point: DataPoint) => `${formatDate(point.x)}: ${point.y}`,\n    onPointClick: undefined\n  },\n  performance: {\n    enableVirtualization: true,\n    clusteringThreshold: 1000,\n    useWebWorker: true\n  }\n};\n\nexport class MTPlot {\n  private container: HTMLElement;\n  private renderer: SVGRenderer;\n  private options: PlotOptions;\n  private data: DataPoint[];\n  private trendLine: { slope: number; intercept: number } | null = null;\n  private lowValueDetector: LowValueDetector;\n  private stagnationDetector: StagnationDetector;\n  private isDirty: boolean = false;\n  private hoveredBarIndex: number | null = null;\n  private updateTimeout: number | null = null;\n  private refreshDelay: number = 100;\n  private resizeObserver: ResizeObserver | null = null;\n  private tooltip: HTMLDivElement | null = null;\n  private worker: Worker | null = null;\n  private zoom: { scale: number; offset: { x: number; y: number } } = {\n    scale: 1,\n    offset: { x: 0, y: 0 }\n  };\n  private clusterData: DataPoint[] = []; // Initialize as an empty array\n\n  constructor(containerId: string, initialData: DataPoint[] = [], options: Partial<PlotOptions> = {}) {\n    const container = document.getElementById(containerId);\n    if (!container) throw new Error(`No element found with id: ${containerId}`);\n    \n    this.container = container;\n    \n    // Initialize options with defaults\n    this.options = {\n      width: 800,\n      height: 400,\n      responsive: true,\n      theme: {\n        backgroundColor: \"#ffffff\",\n        barColor: \"#4CAF50\",\n        textColor: \"#000000\",\n        gridColor: \"#e0e0e0\"\n      },\n      patterns: {\n        lowValue: {\n          threshold: 0.02,\n          consecutiveDays: 2\n        },\n        stagnation: {\n          consecutiveDays: 3,\n          changeThreshold: 0.2,\n          activeChangePercentage: 0.85\n        }\n      },\n      accessibility: {\n        enableKeyboardNavigation: true,\n        enableScreenReader: true,\n        highContrast: false,\n        ariaLabel: 'Time series chart'\n      },\n      interaction: {\n        enableZoom: true,\n        enablePan: true,\n        tooltipFormat: (point: DataPoint) => `${formatDate(point.x)}: ${point.y}`,\n        onPointClick: undefined\n      },\n      performance: {\n        enableVirtualization: true,\n        clusteringThreshold: 1000,\n        useWebWorker: true\n      },\n      statistics: {\n        enabled: false,\n        showMean: false,\n        showMedian: false,\n        showMovingAverage: false,\n        lineColor: {\n          mean: \"#FF0000\",\n          median: \"#0000FF\",\n          movingAverage: \"#00FF00\"\n        }\n      },\n      ...options\n    };\n\n    // Initialize pattern detectors first\n    this.lowValueDetector = new LowValueDetector(this.options.patterns!.lowValue!);\n    this.stagnationDetector = new StagnationDetector(this.options.patterns!.stagnation!);\n    \n    // Initialize renderer\n    this.renderer = new SVGRenderer(this.container, {\n      width: this.getWidth(),\n      height: this.getHeight(),\n      backgroundColor: this.options.theme!.backgroundColor\n    });\n\n    // Initialize data with sorting and clustering if needed\n    this.data = this.processInitialData(initialData);\n    \n    // Set up resize handling if responsive\n    if (this.options.responsive) {\n      this.setupResizeHandling();\n    }\n    \n    // Initial render\n    this.render();\n  }\n\n  private setupTooltip(): void {\n    this.tooltip = document.createElement('div');\n    this.tooltip.style.cssText = `\n      position: absolute;\n      display: none;\n      background: white;\n      border: 1px solid #ccc;\n      padding: 8px;\n      border-radius: 4px;\n      pointer-events: none;\n      z-index: 1000;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    `;\n    document.body.appendChild(this.tooltip);\n  }\n\n  private setupWebWorker(): void {\n    const workerCode = `\n      self.onmessage = function(e) {\n        const { data, patterns } = e.data;\n        const results = {\n          lowValue: findLowValuePatterns(data, patterns.lowValue),\n          stagnation: findStagnationPatterns(data, patterns.stagnation)\n        };\n        self.postMessage(results);\n      };\n    `;\n    const blob = new Blob([workerCode], { type: 'application/javascript' });\n    this.worker = new Worker(URL.createObjectURL(blob));\n    this.worker.onmessage = (e) => {\n      this.handleWorkerResults(e.data);\n    };\n  }\n\n  private setupAccessibility(): void {\n    const svg = this.renderer.getSVGElement();\n    svg.setAttribute('role', 'img');\n    svg.setAttribute('aria-label', this.options.accessibility?.ariaLabel || 'Time series chart');\n    \n    if (this.options.accessibility?.enableKeyboardNavigation) {\n      svg.setAttribute('tabindex', '0');\n      svg.addEventListener('keydown', this.handleKeyboardNavigation.bind(this));\n    }\n  }\n\n  private setupResizeHandling(): void {\n    // Create ResizeObserver to handle container resizing\n    this.resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        if (entry.target === this.container) {\n          this.handleResize();\n        }\n      }\n    });\n\n    // Start observing the container\n    this.resizeObserver.observe(this.container);\n\n    // Also handle window resize events\n    window.addEventListener('resize', () => {\n      this.handleResize();\n    });\n  }\n\n  private handleResize(): void {\n    // Update SVG dimensions\n    const newWidth = this.getWidth();\n    const newHeight = this.getHeight();\n    \n    this.renderer.resize(newWidth, newHeight);\n    this.triggerUpdate();\n  }\n\n  private getWidth(): number {\n    return this.options.responsive ? \n      this.container.clientWidth : \n      this.options.width!;\n  }\n\n  private getHeight(): number {\n    return this.options.responsive ? \n      this.container.clientHeight : \n      this.options.height!;\n  }\n\n  private processInitialData(data: DataPoint[]): DataPoint[] {\n    let processedData = [...data].sort((a, b) => a.x.valueOf() - b.x.valueOf());\n    \n    // Calculate trend line\n    if (processedData.length > 0) {\n      this.calculateTrendLine(processedData);\n    }\n    \n    return processedData;\n  }\n\n  private calculateTrendLine(data: DataPoint[]): void {\n    // Find low value periods to exclude them\n    const lowValuePatterns = this.lowValueDetector.findPatterns(data);\n    const lowValueIndices = new Set<number>();\n    \n    lowValuePatterns.forEach(pattern => {\n      for (let i = pattern.start; i <= pattern.end; i++) {\n        lowValueIndices.add(i);\n      }\n    });\n\n    // Filter out low value periods\n    const filteredData = data.filter((_, index) => !lowValueIndices.has(index));\n    \n    if (filteredData.length < 2) return; // Need at least 2 points for a trend line\n    \n    const xVals = filteredData.map((_, i) => i);\n    const yVals = filteredData.map(point => point.y);\n    \n    const xMean = xVals.reduce((a, b) => a + b, 0) / xVals.length;\n    const yMean = yVals.reduce((a, b) => a + b, 0) / yVals.length;\n    \n    const ssxy = xVals.reduce((sum, x, i) => sum + (x - xMean) * (yVals[i] - yMean), 0);\n    const ssxx = xVals.reduce((sum, x) => sum + (x - xMean) * (x - xMean), 0);\n    \n    const slope = ssxy / ssxx;\n    const intercept = yMean - slope * xMean;\n    \n    this.trendLine = { slope, intercept };\n  }\n\n  private handleKeyboardNavigation(e: KeyboardEvent): void {\n    if (!this.options.accessibility?.enableKeyboardNavigation) return;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        this.zoom.offset.x -= 10;\n        break;\n      case 'ArrowRight':\n        this.zoom.offset.x += 10;\n        break;\n      case 'ArrowUp':\n        this.zoom.scale *= 1.1;\n        break;\n      case 'ArrowDown':\n        this.zoom.scale /= 1.1;\n        break;\n    }\n    this.triggerUpdate();\n  }\n\n  private handleWorkerResults(results: any): void {\n    // Handle pattern detection results from worker\n    this.drawPatterns(this.calculateValueRange(), this.calculateTimeRange());\n  }\n\n  private setupEventListeners(): void {\n    // Add mouse move listener for hover effects\n    this.container.addEventListener('mousemove', (e: MouseEvent) => {\n      const rect = this.container.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      \n      // Find the closest data point\n      const timeRange = this.calculateTimeRange();\n      const hoveredTime = this.getTimeFromX(x, timeRange);\n      const closestPoint = this.findClosestPoint(hoveredTime);\n      \n      if (closestPoint) {\n        // Format tooltip text with date and value on separate lines\n        const tooltipText = this.options.interaction?.tooltipFormat?.(closestPoint) || \n          `Date: ${closestPoint.x.toLocaleDateString()}, Value: ${closestPoint.y.toFixed(2)}`;\n        \n        this.renderer.showTooltip(tooltipText, e.clientX, e.clientY);\n      }\n    });\n\n    this.container.addEventListener('mouseleave', () => {\n      this.renderer.hideTooltip();\n    });\n\n    // Add resize observer for responsive behavior\n    const resizeObserver = new ResizeObserver(() => {\n      this.triggerUpdate();\n    });\n    resizeObserver.observe(this.container);\n\n    // Setup keyboard navigation\n    this.container.tabIndex = 0;\n    this.container.addEventListener('keydown', this.handleKeyboardNavigation.bind(this));\n  }\n\n  private getTimeFromX(x: number, timeRange: { min: number; max: number }): number {\n    const ratio = x / this.options.width!;\n    return timeRange.min + (timeRange.max - timeRange.min) * ratio;\n  }\n\n  private findClosestPoint(timestamp: number): DataPoint | null {\n    if (!this.data.length) return null;\n\n    let closest = this.data[0];\n    let minDiff = Math.abs(closest.x.valueOf() - timestamp);\n\n    for (const point of this.data) {\n      const diff = Math.abs(point.x.valueOf() - timestamp);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closest = point;\n      }\n    }\n\n    return closest;\n  }\n\n  private drawTrendLine(valueRange: { min: number; max: number }, timeRange: { min: number; max: number }): void {\n    if (!this.trendLine || !this.data.length) return;\n\n    const { slope, intercept } = this.trendLine;\n    \n    // Calculate start and end points for trend line\n    const startX = this.getXPosition(this.data[0].x, timeRange);\n    const endX = this.getXPosition(this.data[this.data.length - 1].x, timeRange);\n    \n    const startY = this.scaleY(slope * 0 + intercept, valueRange);\n    const endY = this.scaleY(slope * (this.data.length - 1) + intercept, valueRange);\n    \n    this.renderer.drawLine(\n      startX,\n      startY,\n      endX,\n      endY,\n      \"#ff0000\",\n      2\n    );\n  }\n\n  private render(): void {\n    if (!this.isDirty) return;\n    \n    this.renderer.clear();\n    if (this.data.length === 0) return;\n\n    const { width, height } = this.options;\n    const valueRange = this.calculateValueRange();\n    const timeRange = this.calculateTimeRange();\n\n    // Draw patterns first (background)\n    this.drawPatterns(valueRange, timeRange);\n    \n    // Draw bars\n    this.drawBars(valueRange, timeRange);\n    \n    // Draw trend line on top\n    this.drawTrendLine(valueRange, timeRange);\n\n    // Draw statistics if enabled\n    if (this.options.statistics?.enabled) {\n      this.drawStatistics(valueRange);\n    }\n\n    this.isDirty = false;\n  }\n\n  private addData(point: DataPoint): void {\n    this.data.push(point);\n    this.data.sort((a, b) => a.x.valueOf() - b.x.valueOf());\n    this.calculateTrendLine(this.data);\n    this.triggerUpdate();\n  }\n\n  private triggerUpdate(): void {\n    if (this.updateTimeout) {\n      window.clearTimeout(this.updateTimeout);\n    }\n    \n    this.isDirty = true;\n    this.updateTimeout = window.setTimeout(() => {\n      this.update();\n      this.updateTimeout = null;\n    }, this.refreshDelay);\n  }\n\n  private update(): void {\n    if (!this.isDirty) return;\n    \n    this.renderer.clear();\n    if (this.data.length === 0) return;\n\n    const { width, height } = this.options;\n    const valueRange = this.calculateValueRange();\n    const timeRange = this.calculateTimeRange();\n    \n    // Draw patterns first (background)\n    this.drawPatterns(valueRange, timeRange);\n    \n    // Draw bars\n    this.drawBars(valueRange, timeRange);\n    \n    // Draw trend line on top\n    this.drawTrendLine(valueRange, timeRange);\n\n    // Draw statistics if enabled\n    if (this.options.statistics?.enabled) {\n      this.drawStatistics(valueRange);\n    }\n\n    this.isDirty = false;\n  }\n\n  private calculateValueRange(): { min: number; max: number } {\n    const values = this.data.map(d => d.y);\n    return {\n      min: Math.min(...values),\n      max: Math.max(...values)\n    };\n  }\n\n  private calculateTimeRange(): { min: number; max: number } {\n    const times = this.data.map(d => d.x.valueOf());\n    return {\n      min: Math.min(...times),\n      max: Math.max(...times)\n    };\n  }\n\n  private drawPatterns(valueRange: { min: number; max: number }, timeRange: { min: number; max: number }): void {\n    // Draw low value patterns\n    const lowValuePatterns = this.lowValueDetector.findPatterns(this.data);\n    lowValuePatterns.forEach(pattern => {\n      const startX = this.getXPosition(this.data[pattern.start].x, timeRange);\n      const endX = this.getXPosition(this.data[pattern.end].x, timeRange);\n      this.renderer.drawPattern(\n        startX,\n        0,\n        endX - startX,\n        this.getHeight(),\n        this.options.theme!.lowValueColor,\n        'lowValue'\n      );\n    });\n\n    // Draw stagnation patterns\n    const stagnationPatterns = this.stagnationDetector.findPatterns(this.data);\n    stagnationPatterns.forEach(pattern => {\n      const startX = this.getXPosition(this.data[pattern.start].x, timeRange);\n      const endX = this.getXPosition(this.data[pattern.end].x, timeRange);\n      this.renderer.drawPattern(\n        startX,\n        0,\n        endX - startX,\n        this.getHeight(),\n        this.options.theme!.stagnationColor,\n        'stagnation'\n      );\n    });\n  }\n\n  private drawBars(valueRange: { min: number; max: number }, timeRange: { min: number; max: number }): void {\n    for (let i = 0; i < this.data.length; i++) {\n      const point = this.data[i];\n      const nextPoint = this.data[i + 1];\n      \n      const x = this.getXPosition(point.x, timeRange);\n      const y = this.scaleY(point.y, valueRange);\n      const width = nextPoint \n        ? this.getXPosition(nextPoint.x, timeRange) - x\n        : 10;\n      const height = this.options.height! - y;\n      \n      // Format tooltip text with date and value on the same line\n      const tooltipText = this.options.interaction?.tooltipFormat?.(point) || \n        `Date: ${point.x.toLocaleDateString()}, Value: ${point.y.toFixed(2)}`;\n\n      const isHovered = i === this.hoveredBarIndex;\n      \n      this.renderer.drawBar(\n        x,\n        y,\n        width,\n        height,\n        this.options.theme!.barColor,\n        {\n          interactive: true,\n          tooltip: tooltipText,\n          highContrast: this.options.accessibility?.highContrast,\n          isHovered,\n          onHover: () => {\n            this.hoveredBarIndex = i;\n            this.triggerUpdate();\n          },\n          onLeave: () => {\n            this.hoveredBarIndex = null;\n            this.triggerUpdate();\n          }\n        }\n      );\n    }\n  }\n\n  private drawStatistics(valueRange: { min: number; max: number }): void {\n    const values = this.data.map(d => d.y);\n    const mean = calculateMean(values);\n    const median = calculateMedian(values);\n    \n    // Draw mean line\n    this.renderer.drawPattern(\n      0,\n      this.scaleY(mean, valueRange),\n      this.options.width!,\n      1,\n      'rgba(0,0,255,0.5)'\n    );\n    \n    // Draw median line\n    this.renderer.drawPattern(\n      0,\n      this.scaleY(median, valueRange),\n      this.options.width!,\n      1,\n      'rgba(0,255,0,0.5)'\n    );\n  }\n\n  private getXPosition(x: Date, range: { min: number; max: number }): number {\n    return ((x.valueOf() - range.min) / (range.max - range.min)) * this.options.width!;\n  }\n\n  private scaleY(y: number, range: { min: number; max: number }): number {\n    return this.options.height! - ((y - range.min) / (range.max - range.min)) * this.options.height!;\n  }\n\n  // Public API methods for statistics\n  public getStatistics() {\n    const values = this.data.map(d => d.y);\n    return {\n      mean: calculateMean(values),\n      median: calculateMedian(values),\n      movingAverage: calculateMovingAverage(values, 5)\n    };\n  }\n\n  // Export methods\n  public exportToCSV(): string {\n    const headers = ['Date', 'Value'];\n    const rows = this.data.map(point => [\n      point.x.toISOString(),\n      point.y.toString()\n    ]);\n    \n    return [headers, ...rows]\n      .map(row => row.join(','))\n      .join('\\n');\n  }\n\n  public exportToSVG(): string {\n    return this.renderer.getSVGElement().outerHTML;\n  }\n\n  public setTheme(theme: Partial<Theme>): void {\n    this.options.theme = {\n      ...this.options.theme!,\n      ...theme\n    };\n    this.triggerUpdate();\n  }\n\n  public setPatternOptions(options: Partial<PatternDetectionOptions>): void {\n    if (options.lowValue) {\n      this.lowValueDetector = new LowValueDetector({\n        ...this.options.patterns!.lowValue!,\n        ...options.lowValue\n      });\n    }\n    \n    if (options.stagnation) {\n      this.stagnationDetector = new StagnationDetector({\n        ...this.options.patterns!.stagnation!,\n        ...options.stagnation\n      });\n    }\n    \n    this.options.patterns = {\n      ...this.options.patterns!,\n      ...options\n    };\n    \n    this.triggerUpdate();\n  }\n\n  public setOptions(options: Partial<PlotOptions>): void {\n    this.options = {\n      ...this.options,\n      ...options\n    };\n\n    // Update renderer if dimensions changed\n    if (options.width !== undefined || options.height !== undefined) {\n      this.renderer.resize(this.getWidth(), this.getHeight());\n    }\n\n    // Update pattern detectors if pattern options changed\n    if (options.patterns) {\n      if (options.patterns.lowValue) {\n        this.lowValueDetector = new LowValueDetector({\n          ...this.options.patterns?.lowValue ?? {},\n          ...options.patterns.lowValue\n        });\n      }\n      if (options.patterns.stagnation) {\n        this.stagnationDetector = new StagnationDetector({\n          ...this.options.patterns?.stagnation ?? {},\n          ...options.patterns.stagnation\n        });\n      }\n    }\n\n    this.triggerUpdate();\n  }\n}\n"],"names":["SVG_NS","SVGRenderer","constructor","container","options","this","width","height","svg","document","createElementNS","setAttribute","toString","style","backgroundColor","mainGroup","appendChild","tooltip","display","tooltipBackground","tooltipText","setupInteraction","isPanning","startX","startY","currentTransform","x","y","scale","addEventListener","e","clientX","clientY","dx","dy","updateTransform","preventDefault","scaleFactor","deltaY","transform","resize","clear","firstChild","removeChild","drawBar","color","rect","isHovered","interactive","cursor","showTooltip","_a","onHover","undefined","call","hideTooltip","onLeave","updateTooltipPosition","getHighContrastColor","rgb","hexToRgb","r","g","b","hex","result","exec","parseInt","setupBarInteraction","element","getAttribute","clientToSVGPoint","pt","createSVGPoint","svgP","matrixTransform","getScreenCTM","inverse","text","svgPoint","tspan","textContent","bbox","getBBox","tooltipWidth","tooltipHeight","tooltipX","tooltipY","drawPattern","patternType","pattern","drawText","textElem","attrs","fontFamily","fontSize","stroke","push","strokeWidth","forEach","name","value","drawLine","x1","y1","x2","y2","line","getSVGElement","LowValueDetector","threshold","consecutiveDays","findPatterns","data","length","patterns","valueRange","calculateValueRange","lowThreshold","Math","min","map","d","currentSequence","point","index","isValidSequence","start","end","values","max","sequence","i","valueOf","StagnationDetector","changeThreshold","activeChangePercentage","avgDailyChange","calculateAverageChange","hasEnoughActiveChanges","significantChangeThreshold","abs","isStagnationPeriod","totalChange","changes","change","significantChanges","calculateMean","reduce","sum","val","calculateMedian","sorted","sort","a","middle","floor","calculateMovingAverage","window","windowValues","slice","formatDate","date","toISOString","containerId","initialData","trendLine","isDirty","hoveredBarIndex","updateTimeout","refreshDelay","resizeObserver","worker","zoom","offset","clusterData","getElementById","Error","responsive","theme","barColor","textColor","gridColor","lowValue","stagnation","accessibility","enableKeyboardNavigation","enableScreenReader","highContrast","ariaLabel","interaction","enableZoom","enablePan","tooltipFormat","onPointClick","performance","enableVirtualization","clusteringThreshold","useWebWorker","statistics","enabled","showMean","showMedian","showMovingAverage","lineColor","mean","median","movingAverage","lowValueDetector","stagnationDetector","renderer","getWidth","getHeight","processInitialData","setupResizeHandling","render","setupTooltip","createElement","cssText","body","setupWebWorker","blob","Blob","type","Worker","URL","createObjectURL","onmessage","handleWorkerResults","setupAccessibility","_b","handleKeyboardNavigation","bind","ResizeObserver","entries","entry","target","handleResize","observe","newWidth","newHeight","triggerUpdate","clientWidth","clientHeight","processedData","calculateTrendLine","lowValuePatterns","lowValueIndices","Set","add","filteredData","filter","_","has","xVals","yVals","xMean","yMean","slope","intercept","key","results","drawPatterns","calculateTimeRange","setupEventListeners","getBoundingClientRect","left","top","timeRange","hoveredTime","getTimeFromX","closestPoint","findClosestPoint","toLocaleDateString","toFixed","tabIndex","ratio","timestamp","closest","minDiff","diff","drawTrendLine","getXPosition","endX","scaleY","endY","drawBars","drawStatistics","addData","clearTimeout","setTimeout","update","times","lowValueColor","stagnationColor","nextPoint","range","getStatistics","exportToCSV","row","join","exportToSVG","outerHTML","setTheme","setPatternOptions","setOptions","_d","_c","percentile","lower","upper","ceil","fraction","variance","pow","sqrt","dates","Date"],"mappings":"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"}